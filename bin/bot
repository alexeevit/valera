#!/usr/bin/env ruby

require_relative '../boot'

require 'optparse'
require 'fileutils'
require 'telegram_handler'

options = {}
version = "0.0.1"
daemonize_help = "run daemonized in the background (default: false)"
pidfile_help = "the pid filename"
logfile_help = "the log filename"
include_help = "an additional $LOAD_PATH"
debug_help = "set $DEBUG to true"
warn_help = "enable warnings"

op = OptionParser.new
op.banner = "Valera chatty bot."
op.separator ""
op.separator "Usage: valera [options]"
op.separator ""

op.separator "Process options:"
op.on("-d", "--daemonize", daemonize_help) { options[:daemonize] = true  }
op.on("-p", "--pid PIDFILE", pidfile_help) { |value| options[:pidfile] = value }
op.on("-l", "--log LOGFILE", logfile_help) { |value| options[:logfile] = value }
op.separator ""

op.separator "Ruby options:"
op.on("-I", "--include PATH", include_help) { |value| $LOAD_PATH.unshift(*value.split(":").map{ |v| File.expand_path(v) }) }
op.on("--debug", debug_help) { $DEBUG = true }
op.on("--warn", warn_help) { $-w = true }
op.separator ""

op.separator "Common options:"
op.on("-h", "--help")    { puts op.to_s; exit }
op.on("-v", "--version") { puts version; exit }
op.separator ""

op.parse!(ARGV)

options[:telegram_token] = ENV['TELEGRAM_API_TOKEN']
options[:redis_url] = ENV['REDIS_URL']

class Bot
  attr_reader :options, :telegram_handler

  def initialize(options)
    @options = options

    options[:logfile] = File.expand_path(logfile) if logfile?
    options[:pidfile] = File.expand_path(pidfile) if pidfile?

    telegram_options = {
      token: options[:telegram_token],
      redis_url: options[:redis_url],
    }
    @telegram_handler = TelegramHandler.new(telegram_options)
  end

  def run!
    check_pid
    daemonize if daemonize?
    write_pid

    if logfile?
      redirect_output
    elsif daemonize?
      suppress_output
    end

    telegram_handler.run!
  end

  private

  def daemonize?
    options[:daemonize]
  end

  def logfile
    options[:logfile]
  end

  def pidfile
    options[:pidfile]
  end

  def logfile?
    !logfile.nil?
  end

  def pidfile?
    !pidfile.nil?
  end

  def write_pid
    if pidfile?
      begin
        FileUtils.mkdir_p(File.dirname(pidfile), :mode => 0755)
        File.open(pidfile, ::File::CREAT | ::File::EXCL | ::File::WRONLY){|f| f.write("#{Process.pid}") }
        at_exit { File.delete(pidfile) if File.exists?(pidfile) }
      rescue Errno::EEXIST
        check_pid
        retry
      end
    end
  end

  def check_pid
    if pidfile?
      case pid_status(pidfile)
      when :running, :not_owned
        puts "A server is already running. Check #{pidfile}"
        exit(1)
      when :dead
        File.delete(pidfile)
      end
    end
  end

  def pid_status(pidfile)
    return :exited unless File.exists?(pidfile)
    pid = ::File.read(pidfile).to_i
    return :dead if pid == 0
    Process.kill(0, pid) # check process status
    :running
  rescue Errno::ESRCH
    :dead
  rescue Errno::EPERM
    :not_owned
  end

  def daemonize
    exit if fork
    Process.setsid
    exit if fork
    Dir.chdir "/"
  end

  def redirect_output
    FileUtils.mkdir_p(File.dirname(logfile), :mode => 0755)
    FileUtils.touch logfile
    File.chmod(0644, logfile)
    $stderr.reopen(logfile, 'a')
    $stdout.reopen($stderr)
    $stdout.sync = $stderr.sync = true
  end

  def suppress_output
    $stderr.reopen('/dev/null', 'a')
    $stdout.reopen($stderr)
  end
end

Bot.new(options).run!
